<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>化身孤岛的✨鲸&#39;s blog</title>
  
  <subtitle>记录点滴</subtitle>
  <link href="https://mc-lgy.github.io/atom.xml" rel="self"/>
  
  <link href="https://mc-lgy.github.io/"/>
  <updated>2022-09-01T08:00:41.613Z</updated>
  <id>https://mc-lgy.github.io/</id>
  
  <author>
    <name>化身孤岛的鲸</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈Git使用</title>
    <link href="https://mc-lgy.github.io/posts/0.html"/>
    <id>https://mc-lgy.github.io/posts/0.html</id>
    <published>2022-09-01T06:45:06.231Z</published>
    <updated>2022-09-01T08:00:41.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Git概述"><a href="#一、Git概述" class="headerlink" title="一、Git概述"></a>一、Git概述</h3><p>Git是一种分布式的版本控制工具</p><p><strong>代码托管平台</strong></p><p>目前常用的代码托管平台：</p><ul><li>github</li><li>coding</li><li>gitee(码云)</li></ul><p>coding和gitee都是国内的，由于github的服务器架设在国外，在国内的访问比较慢，一般需要使用科学上网</p><h3 id="二、Git安装"><a href="#二、Git安装" class="headerlink" title="二、Git安装"></a>二、Git安装</h3><p>需要到Git官网下载Git，然后按照提示一步步安装。安装后，可以在右键菜单看到Git GUI Here和Git Bash Here两个选项，点击Git Bash Here选项进入命令行窗口，在窗口内输入一些命令可以实现代码的版本管理、远程仓库的同步功能。</p><h4 id="如何通过git实现克隆远程仓库"><a href="#如何通过git实现克隆远程仓库" class="headerlink" title="如何通过git实现克隆远程仓库"></a>如何通过git实现克隆远程仓库</h4><ol><li>现在我们的本地创建一个文件夹用来接收文件</li><li>在文件夹内右键 选Git Bash Here选项进入命令行窗口</li><li>克隆远程仓库的url(HTTPS的那个)</li><li>输入如下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> url</span><br></pre></td></tr></table></figure></li><li>然后回车，查看同步到本地的git仓库</li></ol><h3 id="三、仓库的推送"><a href="#三、仓库的推送" class="headerlink" title="三、仓库的推送"></a>三、仓库的推送</h3><p>将本地仓库同步到远程仓库(以gitee为例)</p><p><strong>版本库的状态</strong></p><p><img src="/../blogImgs/git_1.png"></p><p>本地仓库同步到远程仓库的流程：从工作区添加到暂存区，再由暂存区再提交到分支，最后通过git push命令同步到远程仓库</p><h4 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h4><ul><li><p>查看状态 (工作区的文件名为红色…)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>从工作区添加到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add . // . 表示所有文件</span><br><span class="line">git add 文件名 //表示一个文件</span><br></pre></td></tr></table></figure><blockquote><p>此时通过git status查看状态，文件名为绿色，表示已经添加到暂存区了</p></blockquote></li><li><p>将暂存区提交到分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;第一次提交&quot;</span>  // 每次提交都需要添加一个备注 -m <span class="string">&quot;字符串&quot;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>现在我们再次查看状态，提示:nothing to commit,working directory clean 表明我们已经成功提交到分支了</p></blockquote><ul><li>推送到远程仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master  //其中origin为主机名 master为分支名</span><br></pre></td></tr></table></figure><p>最后回车在弹出框输入我们的gitee账号和密码即可完成推送，然后我们就可以在远程仓库(gitee)上看到我们从本地提交的文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、Git概述&quot;&gt;&lt;a href=&quot;#一、Git概述&quot; class=&quot;headerlink&quot; title=&quot;一、Git概述&quot;&gt;&lt;/a&gt;一、Git概述&lt;/h3&gt;&lt;p&gt;Git是一种分布式的版本控制工具&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码托管平台&lt;/strong&gt;&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>es6-常量变量与解构赋值</title>
    <link href="https://mc-lgy.github.io/posts/0.html"/>
    <id>https://mc-lgy.github.io/posts/0.html</id>
    <published>2022-09-01T03:42:30.012Z</published>
    <updated>2022-09-01T03:48:34.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、ECMAscript概述"><a href="#一、ECMAscript概述" class="headerlink" title="一、ECMAscript概述"></a>一、ECMAscript概述</h3><p>ECMAscript简称ES，是JavaScript的标准，我们经常说的ES5，ES6等等，可以称作JavaScript的版本，我们在之前学过的所有JavaScript特性，都是基于ES5版本的，今天我们开始讲解的是ES6标准的特性。ES6已更名为ES2015，ES7等后续的版本，我们都可以统称为ES2015+</p><h3 id="二、变量和常量"><a href="#二、变量和常量" class="headerlink" title="二、变量和常量"></a>二、变量和常量</h3><p>ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。我们之前一直使用var定义变量，在ES6版本中，我们可以使用let定义变量，下面我们来说说var与let的区别</p><p><strong>块级作用域</strong></p><p>ES5只有全局作用域和函数作用域，没有块级作用域的概念，这带来了很多不合理的场景。<br>实例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 0-9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);     <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>因为没有块级作用域，所以我们在for语句的外面仍然能获取i的值，在实际开发中，这是一个不可理喻的场景，我们希望的是这个i只在for语句内有效，所以再ES6中添加了块级作用域的概念，我们可以用let声明变量，问题就解决了<br>实例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 0-9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);     <span class="comment">// 报错 i is not defined</span></span><br></pre></td></tr></table></figure><p>因为用let声明变量，变量只在块级作用域下有效，所以再for语句之外输出i会报错。另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><p><strong>不存在变量提升</strong><br>定义：函数声明和变量声明总是被JavaScript解释器隐式地提升(hoist)到包含他们的作用域的最顶端。<br>通过定义我们可以知道，只有变量的声明和函数的声明存在变量提升这一说，那么在ES2015+出现之前，JavaScript声明变量的方式是通过关键字var实现的，声明函数自然通过function啦，ES6中我们用let，const来声明变量和常量。<br>实例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 报错，a is not defined</span></span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果let存在变量提升，那么上述代码就相当于下面这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//undefined</span></span><br><span class="line">  a=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可见，let并不存在变量提升。</p><p><strong>不允许重复声明</strong></p><p>实例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>多次声明是没有意义的，在ES6中，我们使用let声明变量限制了不能多次声明，如果多次声明同一个变量会报错。</p><p><strong>常量</strong></p><p>在ES6中，不仅有变量，还增加了常量的概念，我们用const声明常量，一旦声明，它的值就不能再改变<br>实例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3</span>                   <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>我们说常量不能再改变，说的是不能重新为这个常量赋值，但是如果常量存储的是一个对象，那我们是可以改变这个对象的属性的<br>实例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>&#125;;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;小红&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);   <span class="comment">//小红</span></span><br></pre></td></tr></table></figure><h3 id="三、模板字符串"><a href="#三、模板字符串" class="headerlink" title="三、模板字符串"></a>三、模板字符串</h3><p>之前我们也可以使用JavaScript输出模版字符串，通常是下面这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="string">&quot;age&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&quot;#result&quot;</span>).<span class="title function_">append</span>(</span><br><span class="line"><span class="string">&quot;He is &lt;b&gt;&quot;</span>+person.<span class="property">name</span>+<span class="string">&quot;&lt;/b&gt;&quot;</span>+<span class="string">&quot;and we wish to know his&quot;</span>+person.<span class="property">age</span>+<span class="string">&quot;.That is all&quot;</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>但是我们可以看到：这样的传统做法需要使用大量的“”（双引号）和 + 来拼接才能得到我们需要的模版。但是这样是十分不方便的。</p><p>于是ES6中提供了模版字符串，用&#96;（反引号）标识，用${}将变量括起来。上面的例子可以用模版字符串写成下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#result&quot;</span>).<span class="title function_">append</span>(</span><br><span class="line"><span class="string">`He is &lt;b&gt;<span class="subst">$&#123;person.name&#125;</span>&lt;/b&gt;and we wish to know his<span class="subst">$&#123;person.age&#125;</span>.that is all`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这样的做法就简洁了很多，我们不需要再使用大量的””和+来拼接字符串和变量。</p><p>上面代码中，模板字符串都是用反引号表示，如果在模板字符串中需要使用反引号，则需要在反引号前面用反斜杠转义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mes = <span class="string">`\`hello\` World!`</span>; <span class="comment">// `hello` World!</span></span><br></pre></td></tr></table></figure><p>模板字符串是增强版的字符串，用反引号（&#96;）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><p><strong>多行字符串</strong></p><p>用单引号或是双引号表示的字符串在编辑的过程中只能在一行显示，若要在多行显示需要在每一行结尾添加一个斜杠，这样的编辑方式对开发者显然不够友好，我们可以使用模板字符串的功能换行编辑字符串<br>代码如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`hello</span></span><br><span class="line"><span class="string">world`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><p>因为使用了模板字符串，所以hello world如上所示并没有报错,如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><p><strong>字符串中嵌入变量</strong></p><p>我们在开发的过程中经常会遇到在字符串中嵌入变量的情况，以往我们都是使用字符串连接的方式。有了模板字符串，我们可以在字符串中添加变量或对象的属性，需要将变量名写在${}之中<br>代码如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;student.name&#125;</span>，我今年<span class="subst">$&#123;student.age&#125;</span>岁了`</span>);</span><br></pre></td></tr></table></figure><p>这样的表达方式可以更友好地将代码呈现给开发者。</p><p><strong>模板字符串调用函数</strong></p><p>我们不仅可以将变量和对象的属性嵌入模板字符串，还可以将还是嵌入模板字符串，并显示出函数的返回值<br>代码如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`程序员最常用的一句话是<span class="subst">$&#123;fn(x,y)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>如果模板字符串中嵌入的值是需要通过计算而得到的，我们就可以使用上面的方法来完成这个功能。</p><h3 id="四、解构赋值"><a href="#四、解构赋值" class="headerlink" title="四、解构赋值"></a>四、解构赋值</h3><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值，解构赋值主要包括数组的解构赋值、对象的解构赋值、字符串的解构赋值、函数参数的解构赋值。</p><p><strong>数组的结构赋值</strong></p><p>实例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统赋值</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [str1,str2,str3] = [<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;javascript&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3);</span><br></pre></td></tr></table></figure><p><strong>对象的解构赋值</strong><br>解构不仅可以用于数组，还可以用于对象。<br>实例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;num1,num2&#125; = &#123;<span class="attr">num1</span>:<span class="number">100</span>,<span class="attr">num2</span>:<span class="number">10</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br></pre></td></tr></table></figure><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><p><strong>字符串的结构赋值</strong><br>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象<br>示例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c,d,e] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line"><span class="comment">// 类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。</span></span><br><span class="line"><span class="keyword">let</span> &#123;length : len&#125; = <span class="string">&#x27;hello&#x27;</span>; </span><br><span class="line"><span class="comment">//&#123;length : len&#125; length是长度的意思，len 是 let 声明的一个常量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len) <span class="comment">//长度为数字的5</span></span><br></pre></td></tr></table></figure><p><strong>函数参数的结构赋值</strong><br>函数的参数也可以使用解构赋值。<br>实例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">[x, y]</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、ECMAscript概述&quot;&gt;&lt;a href=&quot;#一、ECMAscript概述&quot; class=&quot;headerlink&quot; title=&quot;一、ECMAscript概述&quot;&gt;&lt;/a&gt;一、ECMAscript概述&lt;/h3&gt;&lt;p&gt;ECMAscript简称ES，是JavaSc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>npm常用命令</title>
    <link href="https://mc-lgy.github.io/posts/0.html"/>
    <id>https://mc-lgy.github.io/posts/0.html</id>
    <published>2022-09-01T03:34:22.857Z</published>
    <updated>2022-09-01T04:00:06.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、npm安装第三方模块"><a href="#一、npm安装第三方模块" class="headerlink" title="一、npm安装第三方模块"></a>一、npm安装第三方模块</h3><p>npm有两种方式安装第三方模块：本地安装和全局安装，使用哪种安装方式，取决于我们用npm模块来做什么。</p><ul><li>如果模块作为项目的依赖，需要被引入到指定项目当中，需要本地安装。</li><li>如果需要模块提供某些命令工具，则需要全局安装。</li></ul><p>稍后我们就来样式两种安装的区别。</p><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><p>我们先打开windows命令行工具，进入到需要安装第三方模块的目录，例如D:&#x2F;npmtest目录，然后执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery</span><br></pre></td></tr></table></figure><p>安装完成之后，npm会在D:&#x2F;npmtest目录下创建一个node_modules的目录，然后将npm模块下载到这个目录之下。上面的例子我们安装的是jQuery，所以打开node_modules会看到一个jQuery的目录。</p><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p>某些第三方模块为我们提供了一些功能需要全局安装才可以使用，例如<code>http-server</code>，他可以为我们提供一个创建静态文件服务器的功能。</p><p>现在我们就来下载这个模块，全局安装需要在命令中添加-g，示例代码如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g http-server</span><br></pre></td></tr></table></figure><p>下载完成之后，http-server模块不会像本地安装那样下载到当前目录下，而是会下载到系统目录中，win10系统下载目录如下所示：</p><blockquote><p>C:\Users\Administrator\AppData\Roaming\npm\node_modules</p></blockquote><p>我们不必去打开这个目录去浏览下载的文件，只要知道全局安装之后，我们可以使用这个模块提供的精灵。</p><p>http-server模块提供了http-server命令，可以用此命令创建一个静态服务器，步骤如下：</p><ol><li>选择开启服务器的目录，这里选择D:&#x2F;test&#x2F;server目录。</li><li>在这个目录中执行http-server命令，默认端口为8080。</li><li>在server目录中创建一个index.html文件。</li><li>打开浏览器，访问<a href="http://127.0.0.1:8080/index.html%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0index.html%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">http://127.0.0.1:8080/index.html，可以看到index.html文件的内容。</a></li><li>如果服务器与其他设备处于同一网络（例如同一wifi网络下的手机和电脑），可以使用ip地址访问此网页。</li></ol><h3 id="二、npm项目初始化"><a href="#二、npm项目初始化" class="headerlink" title="二、npm项目初始化"></a>二、npm项目初始化</h3><p>使用如下命令，可以在当前目录编程一个node项目（实质上就是添加了一个package.json文件）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>执行命令之后会有一系列提示，一直按回车选择默认项即可。创建完成之后会生成一个package.json文件，文件内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.10&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个文件用来记录项目的详细信息，包括项目名称、依赖模块等。</p><h4 id="安装第三方依赖"><a href="#安装第三方依赖" class="headerlink" title="安装第三方依赖"></a>安装第三方依赖</h4><p>通过下列命令，可以将安装的第三方依赖记录在package.json文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save jquery</span><br><span class="line">npm install --save bootstrap</span><br></pre></td></tr></table></figure><p>下载完成之后，可以看到在dependencies字段下面记录了我们下载模块的名称和版本。这样，只要有了这个文件，我们就知道整个node项目需要依赖哪些第三方模块了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bootstrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>下载多个模块比如需要下载jquery和boostrap可以简写：npm install –save jquery boostrap，模块名之间用空格分开。</p></blockquote><h3 id="三、通过配置文件安装依赖"><a href="#三、通过配置文件安装依赖" class="headerlink" title="三、通过配置文件安装依赖"></a>三、通过配置文件安装依赖</h3><p>在实际开发的过程中，项目代码可能会分享给他人或传输到互联网上，我们没有必要将依赖模块的代码一并传输，只需要传输一个package.json文件即可。</p><p>有了这个配置文件，其他人接收到项目代码之后，只需要执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>npm便会根据package.json文件中的记录下载所有依赖模块。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、npm安装第三方模块&quot;&gt;&lt;a href=&quot;#一、npm安装第三方模块&quot; class=&quot;headerlink&quot; title=&quot;一、npm安装第三方模块&quot;&gt;&lt;/a&gt;一、npm安装第三方模块&lt;/h3&gt;&lt;p&gt;npm有两种方式安装第三方模块：本地安装和全局安装，使用哪种</summary>
      
    
    
    
    
  </entry>
  
</feed>
